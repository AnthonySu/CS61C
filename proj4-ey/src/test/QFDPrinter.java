import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.*;

public class QFDPrinter {
    public static void main(String[] args) {
        File qfdDirectory = new File(args[0]);
        File[] qfdTypeDirs = qfdDirectory.listFiles();
        if (qfdTypeDirs == null) {
            throw new IllegalArgumentException("Command line argument is not a directory");
        }

        // Alphabetize sub-folders so we get a deterministic read order
        Arrays.sort(qfdTypeDirs, (f1, f2) -> f1.getName().compareTo(f2.getName()));
        for (File qfdTypeDir : qfdTypeDirs) {
            File[] qfdFiles = qfdTypeDir.listFiles();
            if (qfdFiles == null) {
                String fullName  = qfdDirectory.getName() + File.separator + qfdTypeDir.getName();
                throw new IllegalArgumentException(fullName + " is not a directory");
            }

            // Alphabetize QFD files so we get a deterministic read order
            Arrays.sort(qfdFiles, (f1, f2) -> f1.getName().compareTo(f2.getName()));
            for (File qfdFile : qfdFiles) {
                // Ignore CRC checksum files generated by Hadoop
                if (qfdFile.getName().endsWith(".crc")) {
                    continue;
                }

                System.out.println("Reading file " + qfdFile.getName());
                try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(qfdFile))) {
                    QueryFocusedDataSet qfd = (QueryFocusedDataSet) ois.readObject();

                    System.out.println("Request/Reply Matches");
                    List<RequestReplyMatch> matchList = new ArrayList<>(qfd.getMatches());
                    Collections.sort(matchList, new RRMComparator());
                    for (RequestReplyMatch match : matchList) {
                        System.out.println(match);
                    }


                } catch (IOException e) {
                    throw new RuntimeException("Failed to read file " + qfdFile.getName(), e);
                } catch (ClassNotFoundException e) {
                    // This should never occur
                    throw new RuntimeException("QueryFocusedDataset class not found", e);
                }
            }
        }
    }

    private static class RRMComparator implements Comparator<RequestReplyMatch> {
        @Override
        public int compare(RequestReplyMatch thisMatch, RequestReplyMatch otherMatch) {
            int srcIpComparison = thisMatch.getSrcIp().compareTo(otherMatch.getSrcIp());
            if (srcIpComparison != 0) {
                return srcIpComparison;
            }

            int srcPortComparison = thisMatch.getSrcPort() - otherMatch.getSrcPort();
            if (srcPortComparison != 0) {
                return srcPortComparison;
            }

            int destIpComparison = thisMatch.getDestIp().compareTo(otherMatch.getDestIp());
            if (destIpComparison != 0) {
                return destIpComparison;
            }

            int destPortComparison = thisMatch.getDestPort() - otherMatch.getDestPort();
            if (destPortComparison != 0) {
                return destPortComparison;
            }

            int cookieComparison = thisMatch.getCookie().compareTo(otherMatch.getCookie());
            if (cookieComparison != 0) {
                return cookieComparison;
            }

            return thisMatch.getUserName().compareTo(otherMatch.getUserName());
        }
    }
}
